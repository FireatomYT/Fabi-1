name: Publish Release

on:
  workflow_dispatch:

jobs:
  build_release:
    name: Build and Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'
      - name: Gradle Wrapper Validation
        uses: gradle/actions/wrapper-validation@v4
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Get latest commit short sha
        id: get_sha
        run: echo "sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
      - name: Build with Gradle
        run: ./gradlew build -Psha=${{ env.sha }}
      - name: Get App Version
        id: get_version
        run: echo "version=$(./gradlew printVersion --console=plain -q --warning-mode=none)" >> "$GITHUB_OUTPUT"
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: VOTL.jar
          overwrite: true
      - name: Create Release
        # You may pin to the exact commit or the version.
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          # An optional set of paths representing artifacts to upload to the release. This may be a single path or a comma-delimited list of paths (or globs)
          artifacts: VOTL.jar
          artifactContentType: "raw"
          # Generate release notes. There needs to be a previous version for it to diff against.
          generateReleaseNotes: true
          # Optionally marks this release as prerelease. Set to true to enable.
          prerelease: (contains( ${{ steps.get_version.outputs.version }} , 'SNAPSHOT'))
          # Indicates if existing release artifacts should be replaced. Defaults to true.
          replacesArtifacts: true
          # An optional tag for the release. If this is omitted the git ref will be used (if it is a tag).
          tag: ${{ steps.get_version.outputs.version }}
          # The GitHub token.
          token: ${{ secrets.TOKEN }}

  push_docker:
    name: Push build to docker hub
    runs-on: ubuntu-latest
    needs: build_release

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_USERNAME }}/votl
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.build_release.outputs.version  }}
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          provenance: true
          sbom: true
